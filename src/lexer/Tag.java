package lexer;

public class Tag {
    public final static int
        // keywords
        ACCESS = 256,
        AND = 257,
        BEGIN = 258,
        ELSE = 259,
        ELSIF = 260,
        END = 261,
        FALSE = 262,
        FOR = 263,
        FUNCTION = 264,
        IF = 265,
        IN = 266,
        IS = 267,
        LOOP = 268,
        NEW = 269,
        NOT = 270,
        NULL = 271,
        OR = 272,
        OUT = 273,
        PROCEDURE = 274,
        RECORD = 275,
        REM = 276,
        RETURN = 277,
        REVERSE = 278,
        THEN = 279,
        TRUE = 280,
        TYPE = 281,
        USE = 282,
        WHILE = 283,
        WITH = 284,
        // operators
        GEQ= 285,
        LEQ = 286,
        ASSIGNMENT = 287,
        DIFFERENT = 288,
        // identifiers
        ID = 289,
        // constants
        CHARCONST = 290,
        NUMCONST = 291,
        // End of file
        CHARACTERVAL = 292,
        // character'val
        PUT = 293,
        // put
        DOUBLEPOINT = 294,
        // ..
        EOF = 295,
        // temp
        INVALID = 296,


        // Non terminals start at 1000;

        FICHIER = 1000,
        NT_PROCEDURE = 1001,
        END_PRECEDURE = 1002,
        BEGIN_INSTRUCTION = 1003,
        END_BEGIN_INSTRUCTION = 1004,
        GENERATE_DECLARATIONS = 1005,
        GENERATE_DECLARATIONS_FACTORISATION = 1006,
        GENERATE_INSTRUCTIONS = 1007,
        GENERATE_INSTRUCTIONS_FACTORISATION = 1008,
        DECLARATION = 1009,
        DECLARATION_TYPE = 1010,
        ACCESS_RECORD = 1011,
        DECLARATION_WITH_EXPRESSION = 1012,
        DECLARATION_PROCEDURE = 1013,
        DECLARATION_FUNCTION = 1014,
        GENERATE_IDENT = 1015,
        END_GENERATE_IDENT = 1016,
        IS_DECLARATION = 1017,
        IS_DECLARATION_FACTORISATION = 1018,
        CHAMPS = 1019,
        GENERATE_CHAMPS = 1020,
        END_GENERATE_CHAMPS = 1021,
        NT_TYPE = 1022,
        PARAMS = 1023,
        PARAM = 1024,
        TYPE_OR_MODE_TYPE_PARAM = 1025,
        END_PARAM = 1026,
        MODE = 1027,
        OUT_OR_NOT = 1028,
        EXPRESSION = 1029,
        EXPRESSION_OR = 1030,
        EXPRESSION_ELSE = 1031,
        EXPRESSION_1 = 1032,
        EXPRESSION_AND = 1033,
        EXPRESSION_THEN = 1034,
        EXPRESSION_NOT = 1035,
        EXPRESSION_3 = 1036,
        EXPRESSION_EQUALS = 1037,
        EXPRESSION_4 = 1038,
        EXPRESSION_COMPARAISON = 1039,
        EXPRESSION_5 = 1040,
        EXPRESSION_PLUS_MOINS = 1041,
        EXPRESSION_6 = 1042,
        EXPRESSION_MULT_DIV = 1043,
        EXPRESSION_7 = 1044,
        EXPRESSION_ACCESS_IDENT = 1045,
        EXPRESSION_ATOMS = 1046,
        UNARY = 1047,
        START_NEW_EXPRESSION = 1048,
        GENERATE_EXPRESSION = 1049,
        END_GENERATE_EXPRESSION = 1050,
        INSTRUCTION = 1051,
        INSTRUCTION_IDENT_EXPRESSION = 1052,
        END_RETURN = 1053,
        FOR_INSTRUCTION = 1054,
        NEXT_IF = 1055,
        NT_ELSE = 1056,
        NT_ELSIF = 1057,
        END_ELSIF = 1058,
        WI_EXPRESSION = 1059,
        WI_EXPRESSION_OR = 1060,
        WI_EXPRESSION_ELSE = 1061,
        WI_EXPRESSION_1 = 1062,
        WI_EXPRESSION_AND = 1063,
        WI_EXPRESSION_THEN = 1064,
        WI_EXPRESSION_NOT = 1065,
        WI_EXPRESSION_3 = 1066,
        WI_EXPRESSION_EQUALS = 1067,
        WI_EXPRESSION_4 = 1068,
        WI_EXPRESSION_COMPARAISON = 1069,
        WI_EXPRESSION_5 = 1070,
        WI_EXPRESSION_PLUS_MOINS = 1071,
        WI_EXPRESSION_6 = 1072,
        WI_EXPRESSION_MUL_DIV = 1073,
        WI_EXPRESSION_ACCES_IDENT = 1074,
        WI_EXPRESSION_ATOMS = 1075;
}
