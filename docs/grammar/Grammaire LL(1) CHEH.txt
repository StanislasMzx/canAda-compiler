FICHIER	::=	with Ada . Text_IO ; use Ada . Text_IO ; PROCEDURE BEGIN_INSTR ; EOF
PROCEDURE	::=	procedure ident is PROCEDURE_FACT
PROCEDURE_FACT	::=	''
PROCEDURE_FACT	::=	PLUS_DECL
BEGIN_INSTR	::=	begin PLUS_INSTR end BEGIN_INSTR_FACT
BEGIN_INSTR_FACT	::=	''
BEGIN_INSTR_FACT	::=	ident
PLUS_DECL	::=	DECL PLUS_DECL_FACT
PLUS_DECL_FACT	::=	PLUS_DECL
PLUS_DECL_FACT	::=	''
PLUS_INSTR	::=	INSTR PLUS_INSTR_FACT
PLUS_INSTR_FACT	::=	''
PLUS_INSTR_FACT	::=	PLUS_INSTR
DECL	::=	type ident DECL_FACT
DECL	::=	PLUS_IDENT : TYPE DECL_FACT_3
DECL	::=	procedure ident DECL_PROCEDURE
DECL	::=	function ident DECL_FUNCTION
DECL_FACT	::=	;
DECL_FACT	::=	is DECL_FACT_2
DECL_FACT_2	::=	access ident ;
DECL_FACT_2	::=	record PLUS_CHAMPS end record ;
DECL_FACT_3	::=	;
DECL_FACT_3	::=	( := EXPR9_BIS EXPR ) ;
DECL_PROCEDURE	::=	IS_DECL BEGIN_INSTR ;
DECL_PROCEDURE	::=	PARAMS IS_DECL BEGIN_INSTR ;
DECL_FUNCTION	::=	return TYPE IS_DECL BEGIN_INSTR ;
DECL_FUNCTION	::=	PARAMS return TYPE IS_DECL BEGIN_INSTR ;
PLUS_IDENT	::=	ident PLUS_IDENT_FACT
PLUS_IDENT_FACT	::=	, PLUS_IDENT
PLUS_IDENT_FACT	::=	''
IS_DECL	::=	is IS_DECL_FACT
IS_DECL_FACT	::=	''
IS_DECL_FACT	::=	PLUS_DECL
CHAMPS	::=	PLUS_IDENT : TYPE ;
PLUS_CHAMPS	::=	CHAMPS PLUS_CHAMPS_FACT
PLUS_CHAMPS_FACT	::=	PLUS_CHAMPS
PLUS_CHAMPS_FACT	::=	''
TYPE	::=	ident
TYPE	::=	access ident
PARAMS	::=	( PARAM
PARAM	::=	PLUS_IDENT : PARAM_FACT
PARAM_FACT	::=	TYPE END_PARAM
PARAM_FACT	::=	MODE TYPE END_PARAM
END_PARAM	::=	)
END_PARAM	::=	; PARAM
MODE	::=	in MODE_FACT
MODE_FACT	::=	''
MODE_FACT	::=	out
EXPR	::=	EXPR1 EXPR_BIS
EXPR	::=	new ident EXPR_BIS
EXPR	::=	character’val ( EXPR9_BIS EXPR ) EXPR_BIS
EXPR_BIS	::=	or EXPR9_BIS EXPR_BIS_FACT
EXPR_BIS	::=	''
EXPR_BIS_FACT	::=	EXPR1 EXPR_BIS
EXPR_BIS_FACT	::=	else EXPR9_BIS EXPR1 EXPR_BIS
EXPR1	::=	EXPR2 EXPR1_BIS
EXPR1_BIS	::=	and EXPR9_BIS EXPR1_BIS_FACT
EXPR1_BIS	::=	''
EXPR1_BIS_FACT	::=	EXPR2 EXPR1_BIS
EXPR1_BIS_FACT	::=	then EXPR9_BIS EXPR2 EXPR1_BIS
EXPR2	::=	not EXPR9_BIS EXPR2
EXPR2	::=	EXPR3
EXPR3	::=	EXPR4 EXPR3_BIS
EXPR3_BIS	::=	= EXPR9_BIS EXPR4 EXPR3_BIS
EXPR3_BIS	::=	/= EXPR9_BIS EXPR4 EXPR3_BIS
EXPR3_BIS	::=	''
EXPR4	::=	EXPR5 EXPR4_BIS
EXPR4_BIS	::=	> EXPR9_BIS EXPR5 EXPR4_BIS
EXPR4_BIS	::=	>= EXPR9_BIS EXPR5 EXPR4_BIS
EXPR4_BIS	::=	< EXPR9_BIS EXPR5 EXPR4_BIS
EXPR4_BIS	::=	<= EXPR9_BIS EXPR5 EXPR4_BIS
EXPR4_BIS	::=	''
EXPR5	::=	EXPR6 EXPR5_BIS
EXPR5_BIS	::=	+ EXPR9_BIS EXPR6 EXPR5_BIS
EXPR5_BIS	::=	- EXPR9_BIS EXPR6 EXPR5_BIS
EXPR5_BIS	::=	''
EXPR6	::=	EXPR7 EXPR6_BIS
EXPR6_BIS	::=	* EXPR9_BIS EXPR7 EXPR6_BIS
EXPR6_BIS	::=	/ EXPR9_BIS EXPR7 EXPR6_BIS
EXPR6_BIS	::=	rem EXPR9_BIS EXPR7 EXPR6_BIS
EXPR6_BIS	::=	''
EXPR7	::=	EXPR8
EXPR8	::=	EXPR9 EXPR8_BIS
EXPR8_BIS	::=	. ident EXPR8_BIS
EXPR8_BIS	::=	''
EXPR9	::=	entier
EXPR9	::=	caractere
EXPR9	::=	ident EXPR10
EXPR9	::=	true
EXPR9	::=	false
EXPR9	::=	null
EXPR9	::=	( EXPR9_BIS EXPR )
EXPR9_BIS	::=	- EXPR9_BIS
EXPR9_BIS	::=	''
EXPR10	::=	( EXPR9_BIS PLUS_EXPR
EXPR10	::=	''
PLUS_EXPR	::=	EXPR END_EXPR
END_EXPR	::=	)
END_EXPR	::=	, PLUS_EXPR
INSTR	::=	ident INSTR_IDENT
INSTR	::=	EXPR_SS_IDENT := EXPR9_BIS EXPR ;
INSTR	::=	return INSTR_RETURN
INSTR	::=	begin PLUS_INSTR end ;
INSTR	::=	if EXPR9_BIS EXPR then PLUS_INSTR NEXT_IF
INSTR	::=	for ident in INSTR_FOR
INSTR	::=	while EXPR9_BIS EXPR loop PLUS_INSTR end loop ;
INSTR_IDENT	::=	:= EXPR9_BIS EXPR ;
INSTR_IDENT	::=	( EXPR9_BIS PLUS_EXPR ;
INSTR_IDENT	::=	;
INSTR_RETURN	::=	;
INSTR_RETURN	::=	EXPR9_BIS EXPR ;
INSTR_FOR	::=	EXPR9_BIS EXPR .. EXPR9_BIS EXPR loop PLUS_INSTR end loop ;
INSTR_FOR	::=	reverse EXPR9_BIS EXPR .. EXPR9_BIS EXPR loop PLUS_INSTR end loop ;
NEXT_IF	::=	end if ;
NEXT_IF	::=	else ELSE
NEXT_IF	::=	elsif ELSIF
ELSE	::=	PLUS_INSTR end if ;
ELSIF	::=	EXPR9_BIS EXPR then PLUS_INSTR END_ELSIF
END_ELSIF	::=	end if ;
END_ELSIF	::=	elsif ELSIF
END_ELSIF	::=	else ELSE
EXPR_SS_IDENT	::=	EXPR1_SS_IDENT EXPR_BIS_SS_IDENT
EXPR_SS_IDENT	::=	new ident EXPR_BIS_SS_IDENT
EXPR_SS_IDENT	::=	character’val ( EXPR9_BIS EXPR ) EXPR_BIS_SS_IDENT
EXPR_BIS_SS_IDENT	::=	or EXPR9_BIS EXPR_BIS_FACT_SS_IDENT
EXPR_BIS_SS_IDENT	::=	''
EXPR_BIS_FACT_SS_IDENT	::=	EXPR1_SS_IDENT EXPR_BIS_SS_IDENT
EXPR_BIS_FACT_SS_IDENT	::=	else EXPR9_BIS EXPR1_SS_IDENT EXPR_BIS_SS_IDENT
EXPR1_SS_IDENT	::=	EXPR2_SS_IDENT EXPR1_BIS_SS_IDENT
EXPR1_BIS_SS_IDENT	::=	and EXPR9_BIS EXPR1_BIS_FACT_SS_IDENT
EXPR1_BIS_SS_IDENT	::=	''
EXPR1_BIS_FACT_SS_IDENT	::=	EXPR2_SS_IDENT EXPR1_BIS_SS_IDENT
EXPR1_BIS_FACT_SS_IDENT	::=	then EXPR9_BIS EXPR2_SS_IDENT EXPR1_BIS_SS_IDENT
EXPR2_SS_IDENT	::=	not EXPR9_BIS EXPR2_SS_IDENT
EXPR2_SS_IDENT	::=	EXPR3_SS_IDENT
EXPR3_SS_IDENT	::=	EXPR4_SS_IDENT EXPR3_BIS_SS_IDENT
EXPR3_BIS_SS_IDENT	::=	= EXPR9_BIS EXPR4_SS_IDENT EXPR3_BIS_SS_IDENT
EXPR3_BIS_SS_IDENT	::=	/= EXPR9_BIS EXPR4_SS_IDENT EXPR3_BIS_SS_IDENT
EXPR3_BIS_SS_IDENT	::=	''
EXPR4_SS_IDENT	::=	EXPR5_SS_IDENT EXPR4_BIS_SS_IDENT
EXPR4_BIS_SS_IDENT	::=	> EXPR9_BIS EXPR5_SS_IDENT EXPR4_BIS_SS_IDENT
EXPR4_BIS_SS_IDENT	::=	>= EXPR9_BIS EXPR5_SS_IDENT EXPR4_BIS_SS_IDENT
EXPR4_BIS_SS_IDENT	::=	< EXPR9_BIS EXPR5_SS_IDENT EXPR4_BIS_SS_IDENT
EXPR4_BIS_SS_IDENT	::=	<= EXPR9_BIS EXPR5_SS_IDENT EXPR4_BIS_SS_IDENT
EXPR4_BIS_SS_IDENT	::=	''
EXPR5_SS_IDENT	::=	EXPR6_SS_IDENT EXPR5_BIS_SS_IDENT
EXPR5_BIS_SS_IDENT	::=	+ EXPR9_BIS EXPR6_SS_IDENT EXPR5_BIS_SS_IDENT
EXPR5_BIS_SS_IDENT	::=	- EXPR9_BIS EXPR6_SS_IDENT EXPR5_BIS_SS_IDENT
EXPR5_BIS_SS_IDENT	::=	''
EXPR6_SS_IDENT	::=	EXPR7_SS_IDENT EXPR6_BIS_SS_IDENT
EXPR6_BIS_SS_IDENT	::=	* EXPR9_BIS EXPR7_SS_IDENT EXPR6_BIS_SS_IDENT
EXPR6_BIS_SS_IDENT	::=	/ EXPR9_BIS EXPR7_SS_IDENT EXPR6_BIS_SS_IDENT
EXPR6_BIS_SS_IDENT	::=	rem EXPR9_BIS EXPR7_SS_IDENT EXPR6_BIS_SS_IDENT
EXPR6_BIS_SS_IDENT	::=	''
EXPR7_SS_IDENT	::=	EXPR8_SS_IDENT
EXPR8_SS_IDENT	::=	EXPR9_SS_IDENT EXPR8_BIS
EXPR9_SS_IDENT	::=	entier
EXPR9_SS_IDENT	::=	caractere
EXPR9_SS_IDENT	::=	( EXPR9_BIS PLUS_EXPR
EXPR9_SS_IDENT	::=	true
EXPR9_SS_IDENT	::=	false
EXPR9_SS_IDENT	::=	null